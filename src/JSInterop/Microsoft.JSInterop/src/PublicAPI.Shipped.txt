#nullable enable
Microsoft.JSInterop.DotNetObjectReference
Microsoft.JSInterop.DotNetObjectReference<TValue>.Dispose() -> void
Microsoft.JSInterop.DotNetObjectReference<TValue>.Value.get -> TValue!
Microsoft.JSInterop.IJSInProcessObjectReference
Microsoft.JSInterop.IJSInProcessObjectReference.Invoke<TValue>(string! identifier, params object?[]? args) -> TValue
Microsoft.JSInterop.IJSInProcessRuntime
Microsoft.JSInterop.IJSInProcessRuntime.Invoke<TResult>(string! identifier, params object?[]? args) -> TResult
Microsoft.JSInterop.IJSObjectReference
Microsoft.JSInterop.IJSObjectReference.InvokeAsync<TValue>(string! identifier, System.Threading.CancellationToken cancellationToken, object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSObjectReference.InvokeAsync<TValue>(string! identifier, object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSRuntime
Microsoft.JSInterop.IJSRuntime.InvokeAsync<TValue>(string! identifier, System.Threading.CancellationToken cancellationToken, object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSRuntime.InvokeAsync<TValue>(string! identifier, object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSUnmarshalledObjectReference
Microsoft.JSInterop.IJSUnmarshalledObjectReference.InvokeUnmarshalled<T0, T1, T2, TResult>(string! identifier, T0 arg0, T1 arg1, T2 arg2) -> TResult
Microsoft.JSInterop.IJSUnmarshalledObjectReference.InvokeUnmarshalled<T0, T1, TResult>(string! identifier, T0 arg0, T1 arg1) -> TResult
Microsoft.JSInterop.IJSUnmarshalledObjectReference.InvokeUnmarshalled<T0, TResult>(string! identifier, T0 arg0) -> TResult
Microsoft.JSInterop.IJSUnmarshalledObjectReference.InvokeUnmarshalled<TResult>(string! identifier) -> TResult
Microsoft.JSInterop.IJSUnmarshalledRuntime
Microsoft.JSInterop.IJSUnmarshalledRuntime.InvokeUnmarshalled<T0, T1, T2, TResult>(string! identifier, T0 arg0, T1 arg1, T2 arg2) -> TResult
Microsoft.JSInterop.IJSUnmarshalledRuntime.InvokeUnmarshalled<T0, T1, TResult>(string! identifier, T0 arg0, T1 arg1) -> TResult
Microsoft.JSInterop.IJSUnmarshalledRuntime.InvokeUnmarshalled<T0, TResult>(string! identifier, T0 arg0) -> TResult
Microsoft.JSInterop.IJSUnmarshalledRuntime.InvokeUnmarshalled<TResult>(string! identifier) -> TResult
Microsoft.JSInterop.Implementation.JSInProcessObjectReference
Microsoft.JSInterop.Implementation.JSInProcessObjectReference.Dispose() -> void
Microsoft.JSInterop.Implementation.JSInProcessObjectReference.Invoke<TValue>(string! identifier, params object?[]? args) -> TValue
Microsoft.JSInterop.Implementation.JSInProcessObjectReference.JSInProcessObjectReference(Microsoft.JSInterop.JSInProcessRuntime! jsRuntime, long id) -> void
Microsoft.JSInterop.Implementation.JSObjectReference
Microsoft.JSInterop.Implementation.JSObjectReference.DisposeAsync() -> System.Threading.Tasks.ValueTask
Microsoft.JSInterop.Implementation.JSObjectReference.Id.get -> long
Microsoft.JSInterop.Implementation.JSObjectReference.InvokeAsync<TValue>(string! identifier, System.Threading.CancellationToken cancellationToken, object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.Implementation.JSObjectReference.InvokeAsync<TValue>(string! identifier, object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.Implementation.JSObjectReference.JSObjectReference(Microsoft.JSInterop.JSRuntime! jsRuntime, long id) -> void
Microsoft.JSInterop.Implementation.JSObjectReference.ThrowIfDisposed() -> void
Microsoft.JSInterop.Infrastructure.DotNetDispatcher
Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo
Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.AssemblyName.get -> string?
Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.CallId.get -> string?
Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.DotNetInvocationInfo(string? assemblyName, string! methodIdentifier, long dotNetObjectId, string? callId) -> void
Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.DotNetObjectId.get -> long
Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.MethodIdentifier.get -> string!
Microsoft.JSInterop.Infrastructure.DotNetInvocationResult
Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.DotNetInvocationResult(System.Exception! exception, string? errorKind) -> void
Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.DotNetInvocationResult(object? result) -> void
Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.ErrorKind.get -> string?
Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.Exception.get -> System.Exception?
Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.Result.get -> object?
Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.Success.get -> bool
Microsoft.JSInterop.JSCallResultType
Microsoft.JSInterop.JSCallResultType.Default = 0 -> Microsoft.JSInterop.JSCallResultType
Microsoft.JSInterop.JSCallResultType.JSObjectReference = 1 -> Microsoft.JSInterop.JSCallResultType
Microsoft.JSInterop.JSException
Microsoft.JSInterop.JSException.JSException(string! message) -> void
Microsoft.JSInterop.JSException.JSException(string! message, System.Exception! innerException) -> void
Microsoft.JSInterop.JSInProcessObjectReferenceExtensions
Microsoft.JSInterop.JSInProcessRuntime
Microsoft.JSInterop.JSInProcessRuntime.Invoke<TValue>(string! identifier, params object?[]? args) -> TValue
Microsoft.JSInterop.JSInProcessRuntime.JSInProcessRuntime() -> void
Microsoft.JSInterop.JSInProcessRuntimeExtensions
Microsoft.JSInterop.JSInvokableAttribute
Microsoft.JSInterop.JSInvokableAttribute.Identifier.get -> string?
Microsoft.JSInterop.JSInvokableAttribute.JSInvokableAttribute() -> void
Microsoft.JSInterop.JSInvokableAttribute.JSInvokableAttribute(string! identifier) -> void
Microsoft.JSInterop.JSObjectReferenceExtensions
Microsoft.JSInterop.JSRuntime
Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout.get -> System.TimeSpan?
Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout.set -> void
Microsoft.JSInterop.JSRuntime.InvokeAsync<TValue>(string! identifier, System.Threading.CancellationToken cancellationToken, object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.JSRuntime.InvokeAsync<TValue>(string! identifier, object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.JSRuntime.JSRuntime() -> void
Microsoft.JSInterop.JSRuntime.JsonSerializerOptions.get -> System.Text.Json.JsonSerializerOptions!
Microsoft.JSInterop.JSRuntimeExtensions
abstract Microsoft.JSInterop.JSInProcessRuntime.InvokeJS(string! identifier, string? argsJson, Microsoft.JSInterop.JSCallResultType resultType, long targetInstanceId) -> string?
abstract Microsoft.JSInterop.JSRuntime.BeginInvokeJS(long taskId, string! identifier, string? argsJson, Microsoft.JSInterop.JSCallResultType resultType, long targetInstanceId) -> void
abstract Microsoft.JSInterop.JSRuntime.EndInvokeDotNet(Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo invocationInfo, in Microsoft.JSInterop.Infrastructure.DotNetInvocationResult invocationResult) -> void
static Microsoft.JSInterop.DotNetObjectReference.Create<TValue>(TValue! value) -> Microsoft.JSInterop.DotNetObjectReference<TValue!>!
static Microsoft.JSInterop.Infrastructure.DotNetDispatcher.BeginInvokeDotNet(Microsoft.JSInterop.JSRuntime! jsRuntime, Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo invocationInfo, string! argsJson) -> void
static Microsoft.JSInterop.Infrastructure.DotNetDispatcher.EndInvokeJS(Microsoft.JSInterop.JSRuntime! jsRuntime, string! arguments) -> void
static Microsoft.JSInterop.Infrastructure.DotNetDispatcher.Invoke(Microsoft.JSInterop.JSRuntime! jsRuntime, in Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo invocationInfo, string! argsJson) -> string?
static Microsoft.JSInterop.JSInProcessObjectReferenceExtensions.InvokeVoid(this Microsoft.JSInterop.IJSInProcessObjectReference! jsObjectReference, string! identifier, params object?[]! args) -> void
static Microsoft.JSInterop.JSInProcessRuntimeExtensions.InvokeVoid(this Microsoft.JSInterop.IJSInProcessRuntime! jsRuntime, string! identifier, params object?[]! args) -> void
static Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeAsync<TValue>(this Microsoft.JSInterop.IJSObjectReference! jsObjectReference, string! identifier, System.Threading.CancellationToken cancellationToken, params object?[]! args) -> System.Threading.Tasks.ValueTask<TValue>
static Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeAsync<TValue>(this Microsoft.JSInterop.IJSObjectReference! jsObjectReference, string! identifier, System.TimeSpan timeout, params object?[]! args) -> System.Threading.Tasks.ValueTask<TValue>
static Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeAsync<TValue>(this Microsoft.JSInterop.IJSObjectReference! jsObjectReference, string! identifier, params object?[]! args) -> System.Threading.Tasks.ValueTask<TValue>
static Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeVoidAsync(this Microsoft.JSInterop.IJSObjectReference! jsObjectReference, string! identifier, System.Threading.CancellationToken cancellationToken, params object?[]! args) -> System.Threading.Tasks.ValueTask
static Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeVoidAsync(this Microsoft.JSInterop.IJSObjectReference! jsObjectReference, string! identifier, System.TimeSpan timeout, params object?[]! args) -> System.Threading.Tasks.ValueTask
static Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeVoidAsync(this Microsoft.JSInterop.IJSObjectReference! jsObjectReference, string! identifier, params object?[]! args) -> System.Threading.Tasks.ValueTask
static Microsoft.JSInterop.JSRuntimeExtensions.InvokeAsync<TValue>(this Microsoft.JSInterop.IJSRuntime! jsRuntime, string! identifier, System.Threading.CancellationToken cancellationToken, params object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
static Microsoft.JSInterop.JSRuntimeExtensions.InvokeAsync<TValue>(this Microsoft.JSInterop.IJSRuntime! jsRuntime, string! identifier, System.TimeSpan timeout, params object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
static Microsoft.JSInterop.JSRuntimeExtensions.InvokeAsync<TValue>(this Microsoft.JSInterop.IJSRuntime! jsRuntime, string! identifier, params object?[]? args) -> System.Threading.Tasks.ValueTask<TValue>
static Microsoft.JSInterop.JSRuntimeExtensions.InvokeVoidAsync(this Microsoft.JSInterop.IJSRuntime! jsRuntime, string! identifier, System.Threading.CancellationToken cancellationToken, params object![]! args) -> System.Threading.Tasks.ValueTask
static Microsoft.JSInterop.JSRuntimeExtensions.InvokeVoidAsync(this Microsoft.JSInterop.IJSRuntime! jsRuntime, string! identifier, System.TimeSpan timeout, params object![]! args) -> System.Threading.Tasks.ValueTask
static Microsoft.JSInterop.JSRuntimeExtensions.InvokeVoidAsync(this Microsoft.JSInterop.IJSRuntime! jsRuntime, string! identifier, params object![]! args) -> System.Threading.Tasks.ValueTask
virtual Microsoft.JSInterop.JSInProcessRuntime.InvokeJS(string! identifier, string? argsJson) -> string?
virtual Microsoft.JSInterop.JSRuntime.BeginInvokeJS(long taskId, string! identifier, string? argsJson) -> void
~Microsoft.JSInterop.DotNetObjectReference<TValue>
